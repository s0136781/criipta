#Реализовать программный продукт решения сравнений первой степени
#двумя способами с указанием всех промежуточных шагов вычисления
#(текущее значение коэффициентов расширенном алгоритме Евклида и
#текущее значение степеней в формуле Эйлера), программный продукт так же
#должен реализовывать возможность того, что сравнение не имеет решений
#или имеет больше одного решения. В первом случае сообщать пользователю
#с пояснением, во втором строить все возможные решения.


def extended_euclidean_algorithm(a, b): #обьявление функции с двумя параметрами a и b
    if a == 0:
        return b, 0, 1        #Возврат кортежа с результатом: НОД b, коэффициенты 0 и 1.

    gcd, x1, y1 = extended_euclidean_algorithm(b % a, a) #Рекурсивный вызов функции с новыми параметрами.

    x = y1 - (b // a) * x1    #Вычисление коэффициента x
    y = x1         #Присвоение значения коэффициенту y.

    return gcd, x, y

def solve_linear_congruence(a, b, m):  # Вызов функции для нахождения НОД(a, m) и коэффициентов x и y.
    gcd, x, y = extended_euclidean_algorithm(a, m)

    if b % gcd != 0:       #Проверка условия, что уравнение не имеет решений (если остаток от деления b на НОД(a, m) не равен 0).
        return "Уравнение не имеет решений"

    x0 = x * (b // gcd) % m
    solutions = [(x0 + k * (m // gcd)) % m for k in range(gcd)]    # Генерация списка всех возможных решений уравнения.

    if len(solutions) > 1:                         #Проверка, что у уравнения более одного решения.
        min_solution = min(solutions)                         # # Начинаем с минимального положительного решения
        min_index = solutions.index(min_solution)
        solutions = solutions[min_index:] + solutions[:min_index]        #Сдвиг всех решений так, чтобы начинаться с минимального положительного решения.

    return solutions


a = 15
b = 35
m = 100

result = solve_linear_congruence(a, b, m)

if isinstance(result, list):                  #Итерация по всем решениям с индексом и значением.
    print("Все возможные решения уравнения:")
    for idx, solution in enumerate(result):
        print(f"x{idx+1} = {solution}")
else:
    print(result)